import React, { useState } from 'react';
import type { Vulnerability } from '../types';

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  setHighlightedLine: (line: number | null) => void;
}

const severityStyles = {
  'Critical': 'bg-red-500 border-red-400',
  'High': 'bg-orange-500 border-orange-400',
  'Medium': 'bg-yellow-500 border-yellow-400',
  'Low': 'bg-blue-500 border-blue-400',
  'Informational': 'bg-gray-500 border-gray-400',
};

const MarkdownRenderer: React.FC<{ content: string }> = ({ content }) => {
    return (
        <div className="prose prose-invert prose-sm max-w-none text-text-primary">
            {content.split(/(\`\`\`[\s\S]*?\`\`\`)/g).filter(Boolean).map((block, index) => {
                if (block.startsWith('```')) {
                    const language = block.match(/```(\w+)?\n/)?.[1] || '';
                    const code = block.replace(/```\w*\n/, '').replace(/```$/, '');
                    return (
                        <div key={index} className="bg-background rounded-md my-2 relative">
                            <pre className="p-3 rounded-md overflow-x-auto">
                                <code className={`font-mono text-xs`}>{code.trim()}</code>
                            </pre>
                        </div>
                    );
                }
                return <p key={index} className="my-1">{block}</p>;
            })}
        </div>
    );
};


export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({ vulnerability, setHighlightedLine }) => {
  const [isOpen, setIsOpen] = useState(true);

  const handleMouseEnter = () => {
    if (vulnerability.location.line_number) {
      setHighlightedLine(vulnerability.location.line_number);
    }
  };

  const handleMouseLeave = () => {
    setHighlightedLine(null);
  };

  return (
    <div
      className="bg-background border border-border-color rounded-lg overflow-hidden transition-all duration-300"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between p-3 text-left"
      >
        <div className="flex items-center space-x-3">
          <span className={`px-2.5 py-1 text-xs font-bold text-white rounded-full ${severityStyles[vulnerability.severity]}`}>
            {vulnerability.severity}
          </span>
          <span className="font-semibold text-text-primary">{vulnerability.name}</span>
        </div>
         <svg
            className={`w-5 h-5 text-text-secondary transform transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
            fill="none" viewBox="0 0 24 24" stroke="currentColor"
        >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {isOpen && (
        <div className="p-4 pt-2 border-t border-border-color/50">
            <div className="space-y-3">
                <div>
                    <h4 className="font-semibold text-sm text-primary mb-1">Description</h4>
                    <MarkdownRenderer content={vulnerability.description}/>
                </div>
                {vulnerability.location?.code_snippet && (
                     <div>
                        <h4 className="font-semibold text-sm text-primary mb-1">
                            Vulnerable Snippet {vulnerability.location.line_number && `(Line ${vulnerability.location.line_number})`}
                        </h4>
                        <div className="bg-surface p-3 rounded-md font-mono text-xs text-text-primary overflow-x-auto">
                            <pre><code>{vulnerability.location.code_snippet}</code></pre>
                        </div>
                    </div>
                )}
                 <div>
                    <h4 className="font-semibold text-sm text-primary mb-1">Remediation</h4>
                    <MarkdownRenderer content={vulnerability.remediation}/>
                </div>
                {vulnerability.poc && (
                    <div>
                        <h4 className="font-semibold text-sm text-primary mb-1">Proof of Concept</h4>
                        <MarkdownRenderer content={vulnerability.poc}/>
                    </div>
                )}
            </div>
        </div>
      )}
    </div>
  );
};